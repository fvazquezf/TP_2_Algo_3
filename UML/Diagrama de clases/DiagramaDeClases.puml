@startuml TP2

title Diagrama de Clases Caj√∫

hide circle
skinparam classAttributeIconSize 0
skinparam roundcorner 25
skinparam sequenceArrowThickness 2
skinparam classFontSize 20

skinparam class {
BackgroundColor FloralWhite
ArrowColor DimGray
BorderColor DimGray
}

class Panel{
       - pregunta: Pregunta
       - jugadores: HashMap<String, Jugador>
       - fabricaPreguntas: FabricaPreguntas
       - estadoDelJuego: EstadoFlowDelJuego
       - jugadorActual: Jugador
       - jugadorSiguiente: Jugador
       - estadoExclusividad: EstadoExclusividad
       + Panel(LectorPreguntas)
       + crearJugadores(String, String)
       + hacerPregunta(Collection<String>)
       + siguientePregunta()
       + siguienteJugador()
       + activarExclusividad()
       + calcularExclusividad()
       + activarDuplicador()
       + activarTriplicador()
}

class Jugador{
        - nombre: String
        - puntos: Int
        - estadoMultiplicador: EstadoMultiplicador
        - exclusividadDisponible: Int
        + Jugador(String)
        + pedirPuntos(): Int
        + estadoDuplicador()
        + estadoTriplicador()
        + asignarPuntos(Int)
        + activarExclusividad()
}

abstract class Pregunta{
        # tipoPregunta: String
        # opcionesCorrectas: Collection<String>
        # todasLasOpciones: Collection<String>
        # textoPregunta: String
        + compararRespuestas(Collection<String>): Int
        + activarMultiplicador()
        + activarExclusividad()
}

class PreguntaMCClasica{
        - comportamiento: ComportamientoClasico
        + PreguntaMCClasica(String, String, String[], Collection<String>)
        + compararRespuestas(Collection<String>): Int
}

class PreguntaMCConPenalidad{
        - comportamiento: ComportamientoConPenalidad
        + PreguntaMCConPenalidad(String, String, String[], Collection<String>)
        + compararRespuestas(Collection<String>): Int
        + activarExclusividad()
}

class PreguntaMCConPuntajeParcial{
        - comportamiento: ComportamientoConPuntajeParcial
        + PreguntaMCConPuntajeParcial(String, String, String[], Collection<String>)
        + compararRespuestas(Collection<String>): Int
}

class PreguntaGC{
        - comportamiento: ComportamientoClasico
        - grupos: Map<String, String>
        + PreguntaGC(String, String, String[], Collection<String>, Map<String, String>)
        + compararRespuestas(Collection<String>): Int
}

class PreguntaOC{
        - comportamiento: ComportamientoClasico
        + PreguntaOC(String, String, String[], Collection<String>)
        + compararRespuestas(Collection<String>): Int
}

class PreguntaVoFClasica{
        - comportamiento: ComportamientoClasico
        + PreguntaVoFClasica(String, String, String[])
        + compararRespuestas(Collection<String>): Int
}

class PreguntaVoFConPenalidad{
        - comportamiento: ComportamientoConPenalidad
        + PreguntaVoFConPenalidad(String, String, String[])
        + compararRespuestas(Collection<String>): Int
        + activarExclusividad()
}

class FabricaPreguntas{
       + crearPregunta(String, String, String[], Collection<String>, Map<String, String>): Pregunta
}


interface Multiplicador{
        + multiplicar(Int): Int
}

class Uniplicador{
        + multiplicar(Int): Int
}

class Duplicador{
        - cantidadDuplicador: Int
        + multiplicar(Int): Int
        + cambiarEstado()
}

class Triplicador{
        - cantidadTriplicador: Int
        + multiplicar(Int): Int
        + cambiarEstado()
}

class EstadoMultiplicador{
        - uniplicador: Uniplicador
        - duplicador: Duplicador
        - triplicador: Triplicador
        - multiplicadorActual: Multiplicador
        + multiplicar(Int): Int
        + estadoDuplicador()
        + estadoTriplicador()
}

interface Exclusividad{
        + multiplicar(Int): Int
        + proximo(): Exclusividad
}

class ExclusividadDesactivada{
        + multiplicar(Int): Int
        + proximo(): Exclusividad
}

class ExclusividadDoble{
        + multiplicar(Int): Int
        + proximo(): Exclusividad
}

class ExclusividadSimple{
        + multiplicar(Int): Int
        + proximo(): Exclusividad
}

class EstadoExclusividad{
        - puntosJugadores: Dictionary<Jugador, Int>
        - estadoActual: Exclusividad
        + guardarRespuesta(Jugador, Integer)
        + activarExclusividad()
        + calcularExclusividad(Jugador, Jugador)
}

interface FlowDelJuego{
        + siguienteTurno(Panel)
        + siguiente(): FlowDelJuego
}

class EstadoFlowDelJuego{
        - flow: FlowDelJuego
        + proximoEstado(Panel)
}

class SiguienteRonda{
        + siguienteTurno(Panel)
        + siguiente(): FlowDelJuego
}

class SiguienteTurno{
        + siguienteTurno(Panel)
        + siguiente(): FlowDelJuego
}

class LectorPreguntas{
        - fabricaPreguntas: FabricaPreguntas
        + parsearPreguntas(): List<Pregunta>
}


Panel "1 " o-- "2  " Jugador
Panel "1 " o-- "*" Pregunta
LectorPreguntas --> FabricaPreguntas


PreguntaMCClasica --right-|> Pregunta
PreguntaMCConPenalidad -up-|> Pregunta
PreguntaMCConPuntajeParcial ---right-|> Pregunta
PreguntaOC -up-|> Pregunta
PreguntaGC -up-|> Pregunta
PreguntaVoFClasica -up-|> Pregunta
PreguntaVoFConPenalidad -left-|> Pregunta
FabricaPreguntas ..> Pregunta

Uniplicador ..|> Multiplicador
Duplicador ..|> Multiplicador
Triplicador ..|> Multiplicador
EstadoMultiplicador --> Uniplicador
EstadoMultiplicador --> Duplicador
EstadoMultiplicador --> Triplicador
Jugador "1 " *--> "2  " EstadoMultiplicador

ExclusividadDesactivada ..|> Exclusividad
ExclusividadDoble ..|> Exclusividad
ExclusividadSimple ..|> Exclusividad
EstadoExclusividad --> ExclusividadDesactivada
EstadoExclusividad --> ExclusividadDoble
EstadoExclusividad --> ExclusividadSimple
Panel " 1" *--> "1    " EstadoExclusividad

Panel " 1 " *-right-> "1 " EstadoFlowDelJuego
SiguienteRonda ..|> FlowDelJuego
SiguienteTurno ..|> FlowDelJuego
EstadoFlowDelJuego --> SiguienteRonda
EstadoFlowDelJuego --> SiguienteTurno


@enduml