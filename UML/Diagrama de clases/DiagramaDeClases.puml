@startuml TP2

title Diagrama de Clases Caj√∫

hide circle
skinparam classAttributeIconSize 0
skinparam roundcorner 25
skinparam sequenceArrowThickness 2
skinparam classFontSize 20

skinparam class {
BackgroundColor FloralWhite
ArrowColor DimGray
BorderColor DimGray
}

class Panel{
       - numeroDePreguntaActual: Int
       - preguntaActual: Pregunta
       - preguntaSiguiente: Pregunta
       - jugadorActual: Jugador
       - jugadorSiguiente: Jugador
       - cambiarPregunta: boolean

       + crearPregunta(String, String, Collection<String>, Collection<String>)
       + siguientePregunta()
       + crearJugadores(String, String)
       + siguienteJugador()
       + hacerPregunta(Collection<String>)
       + activarExclusividad()
       + calcularExclusividad()
       + activarDuplicador()
       + activarTriplicador()
}

class EstadoExclusividad{
       - puntosJugadores: Dictionary<Jugador, Int>
       - estadoActual: Multiplicador

       + guardarRespuesta(Jugador, Int)
       + activarExclusividad()
       + calcularExclusividad(Jugador, Jugador)
}


class FabricaPreguntas{
       + crearPregunta(String, String, set<String>): Pregunta
}

class Jugador{
        - nombre: String
        - puntos: Int
        - estadoMultiplicador: EstadoMultiplicador
        - exclusividadDisponible: Int

        + estadoDuplicador()
        + estadoTriplicador()
        + activarExclusividad()
}

abstract class Pregunta{
        # opcionesCorrectas: Collection<String>
        # todasLasOpciones: Collection<String>
        # textoPregunta: String

        + {abstract}compararRespuestas(Collection<String>): Int
        + activarMultiplicador()
        + activarExclusividad()
}

class PreguntaClasica{
        + compararRespuestas(Collection<String>): Int
}

class PreguntaConPenalidad{
        + compararRespuestas(Collection<String>): Integer
        + activarMultiplicador()
        + activarExclusividad
}

class PreguntaConPuntajeParcial{
        + compararRespuestas(Collection<String>): Int
}

interface Multiplicador{
        + multiplicar(Int): Int
        + proximo(): Multiplicador
}

class Ceroplicador{
        + multiplicar(Int): Int
        + proximo(): Multiplicador
}

class Unplicador{
        + multiplicar(Int): Int
        + proximo(): Multiplicador
}

class Duplicador{
        - cantidadDuplicador: Int

        + multiplicar(Int): Int
        + proximo(): Multiplicador
        + cambiarEstado()
}

class Triplicador{
        - cantidadTriplicador: Int

        + multiplicar(Int): Int
        + proximo(): Multiplicador
        + cambiarEstado()
}

Panel o-->"1..*" Jugador
Panel o--"1--*" Pregunta
Panel o-left->"1" FabricaPreguntas
Panel o--> EstadoExclusividad
FabricaPreguntas ..> Pregunta
PreguntaClasica -up-|> Pregunta
PreguntaConPenalidad -up-|> Pregunta
PreguntaConPuntajeParcial -up-|> Pregunta
Ceroplicador .up.|> Multiplicador
Unplicador .up.|> Multiplicador
Duplicador .up.|> Multiplicador
Triplicador .up.|> Multiplicador
Jugador o-->"1" Multiplicador
PreguntaConPenalidad ..> Multiplicador
PreguntaClasica ..> EstadoExclusividad
PreguntaConPuntajeParcial ..> EstadoExclusividad

@enduml